//----------------------------------------------- ОБЩИЕ МОМЕНТЫ

CTRL + Insert - копировать в буфер
SHIFT + Insert - вставить из буфера

gitk --all& - открываеться GUI для консольного гита.

.gitignore - в эту папку можно прописать файлы или папки которые будет игнорироваться гитом.
	напрмер записать:
		index.html - будет игнорироваться
		css/ - папка css будет игнорироваться
		main/*.js - игнорировать файлы с расширение .js в папке main
		
README.md
	файл должен быть в верхнем регистре.
	md - markdown (syntax)
	
// --------------------------------------------- Fast CREATE and PUSH !

Создаем удаленный репозиторий на GitHub и загружаем в него локальный:
	В локальном репозитории на диске:
		git init - инициализируем прокт на локальном репозитории.
			git add . - добавляем все файлы в репозиторий.
				git commit -m 'Your comment for commit' - коммитим файлы, теперь мы можем отправить их на удаленный репозиторий.
				
					Пушим существующий локальный репозиторий на GitHub:
						Подключаем наш локальный репозиторий к репозиторию на GitHub:
							git remote add origin https://github.com/STiGMABY/test.git (ВАЖНО! Если вы сразу скачали пустой, недавно созданный репозиторий с GitHub себе на диск, то эту команду выполнять не нужно)
							
								git remote - проверка или есть подключение локального репозитория репозиторию на GitHub. 
					
								git push -u origin master - Пушим, файлы на удаленный репозиторий. Вместо ветки master мы можем указать любую другую из имеющихся.
					
//------------------------------------ ПУЛИМ ПРОЕКТ с GitHub

Как забашить проек с Git Bash:
	Заходим в папку назначения.
		Git Bash Here.
			В консоли пишем:
				git clone <URL с гит репозитория>
				
//----------------------------------- ОТКАТ НА ДРУГОЙ КОММИТ С ПОМОЩЬЮ Git GUI (Graphical user interface)
	
Откат на другую версию c помощью GUI консольного гита:
	В корне проекта:
		Git Bash Here
			gitk --all& - открываеться GUI для консольного гита.
				Открваеться окн в котором выбираем идентификатор нужного коммита (SHA1 ID) 
					CTRL + Insert - копировать.
					SHIFT + Insert - вставить.
						В консоли git checkout ИДЕНТИФИКАТОР(SHA1 ID)
		
Если не получаеться перейтина другой коммит из за введеных зменений (Local uncommitted changes ...):
	В консоли git status
		git checkout src/app.js (путь к файлу который надо откатить)
			Если снова ввести git status то проверим все ли ОК.

//------------------------------------------------ ОБЩИЕ КОМАНДЫ
ls - показать список файлов

git pull origin <branch-name> - пулим с выбраной ветки
	
git init - инициализация

git status - покажет есть ли антрекнутые файлы. Файлы которые мы добавили или изменили в проекте, но НЕ закомитили.

git log - вывести все изменения которые происходили в проекте.
	git log --oneline - упрощенный вывод изменений
	
		Другие, варинаты вывода инфомации:
			git log --pretty=oneline - еще один способ вывода изменений
			git log --oneline --max-count=3 - упрощенный вывод трех последних коммитов.
			git log --oneline --author='STiGMA'- упрощенный вывод по автору коммитов (регистр НЕ имеет значения). 
			
			--pretty= - позволяет вывести несколько дополнительных свойств.
			
			Также можно задавать свой формат вывода format:'' - в ковычках задаем формат
				git log format:'%h'
					%h - выведет короткую версию хэша (разделяем пробелом либо тирэ)
					%s - вывести коментирии коммита
					%ad - выведет дату
					[ %an ] - выведет автора в квадратных скобках
					--date=short - для коректного вывода даты.
					
					git log --pretty=format:'%h - %s : %ad [ %an ]' --date=short
						получим(пример):
							9de230e - Added Easy-Git_Helper : 2020-08-21 [ STiGMA ]
	 

//------------------------------------------------ ДОБАВЛЕНИЕ В ЛОКАЛЬНЫЙ РЕПОЗИТОРИЙ
	
git add <file-name>- добавление
	git add . - добавить все файлы в гит. 
		
		git add *.html - добавить файлы у которых расширение .html
		git add css/* - добавить все файлы из папки css
			git add css/*.scss - добавить файлы из папки css у которых расширение .scss
				git add css/**/*.scss  - добавить из всех дочерних паппок которые находятся в папке css, файлы с расширением .scss 
					git add !css/styles.css - добавить все файлы из папки css, кроме styles.css
						git add !*.html - добвить все файлы, кроме файлов с расширением .html
	
		git commit -m 'This is my commit'
			ПРИМЕЧАНИЕ: Git закомитить только те изменения после которых мы вводили команду 'git add'. Т.е. если мы использовали команду 'git add' потом сделали изменение  и использовали 'git commit'. То наши последние изменения не попадут в коммит.
			
//------------------------------------------------------  ИЗМЕНЕНИЕ, УДАЛЕНИЕ

git checkout <commitID> - откат на другую версию. commit ID можно занять если ввести команду git log или git log --oneline
git checkout master - вернуться на самую последнию версию в ветке master

git revert <commitID> - ОТМЕНИТЬ определенный коммит. Файл будет УДАЛЕН из вашего локального репозитория на жестком диске.
	После выполнения вышеописанной команды, мы попадем в редактор Vim. Для того, что бы не нужно было открытьва занова консоль, можно выйти из редактора командой :wq
	
git restore --staged <file> - to discard changes in working directory(удалить последние измененния файлов либо файл, отменить коммит определенного файла)
	
git reset <commitID> - УДАЛИТ все коммиты до коммита введенного после клюевого слова reset. НО если мы например удалим, последний коммит в котором мы 	сделали изменения в каком то файле. То тосле команды git log мы увидим в консоли, что данный коммит отсутствует, НО изменения в рабочей папке на диске мы не увидим.

	git reset <commitID> --hard - в этом случае будет УДАЛЕНЫ все коммиты до соответсвующего commitID, а так же ФАЙЛЫ на локальном диске.

	git reset HEAD <example.txt> - вернуть изменения к предыдушим последним для файла example.txt

	git reset --soft HEAD~1  - откатиться на одно изменение назад
	
git branch -d <branch-name> - удалить ветку на ЛОКАЛЬНОМ репозитории

git push origin --delete test - удалить ветку на УДАЛЕННОМ репозитории

git commit --amend -m "Some info" - изменение имени коммита на удаленном репозитории
	далее
		git push --force 

//------------------------------------------------------- СОЗДАНИЕ И ПЕРЕХОД ПО ВЕТКАМ.

git branch -a - показать все ветки (либо просто git branch)

git branch <new branch name> - создать новую ветку
	
git checkout -b <new branch name> 
	или git switch -c <new-branch-name> - создать и перейти на ветку 
	
git checkout <branch-name> - перейти на другую ветку 
	или git switch <branch-name>

//------------------------------------------------------ ОЪЕДИНЕНИЯ ВЕТОК

Перейдите на ветку которая будет главной (например master).
	git merge <branch-name> - ветка объеденится с главное веткой master. Ветка с которой произошло объединение не пропадает!
	
//------------------------------------------------------- РАБОТА В КОМАНДЕ

git pull - скачать новые либо измененные файл с удаленного репозитория.
